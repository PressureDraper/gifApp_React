{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","_ref","setCategory","_useState","useState","_useState2","_slicedToArray","inputValue","setinputValue","React","createElement","onSubmit","e","preventDefault","trim","length","cats","concat","_toConsumableArray","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","width","height","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","done","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","getGifs","_asyncToGenerator","_callee","newCat","ans","_yield$ans$json","data","gifs","_context","fetch","json","map","gif","_gif$images","images","original","_x","apply","arguments","GifGrid","category","setImages","useEffect","setTimeout","filter","img","assign","GifExpertApp","categories","Fragment","div","document","querySelector","ReactDOM","render"],"mappings":"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","file":"static/js/main.53841c97.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useState } from \"react\";\n\nexport const AddCategory = ({setCategory}) => {\n\n    const [inputValue, setinputValue] = useState('')\n\n    const handleInputValue = (e) => { //allows to write on input\n        setinputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => { //manage form submit actions\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategory(cats => [ inputValue, ...cats]); /* Se recuperan los elementos y se añade el otro valor */\n            setinputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" value={inputValue} onChange={handleInputValue}>\n            </input>\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategory: PropTypes.func.isRequired\n}","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n  return (\n    <div className='card animate__animated animate__backInLeft'>\n        <img src={url} alt={id} width=\"auto\" height=\"200px\"></img>\n        <h5>{title}</h5>\n    </div>\n  )\n}\n","export const getGifs = async (newCat) => {\r\n    // const url = `https://api.giphy.com/v1/gifs/search?q=Rainbow+Six+Siege&limit=20&api_key=ePEsJ53licCipIuc2sRXvPcfc8cV3A37`;\r\n    const ans = await fetch(newCat);\r\n    const { data } = await ans.json();\r\n\r\n    const gifs = data.map(gif => { //map returns new array forEach doesn't\r\n        return {\r\n            id: gif.id,\r\n            title: gif.title,\r\n            url: gif.images?.original.url\r\n        }\r\n    });\r\n\r\n    return gifs; //return array of all gifs from a category\r\n}","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { GifGridItem } from \"./GifGridItem\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const GifGrid = ({category}) => {\n\n    const [images, setImages] = useState([]);\n\n    useEffect(() => { //Allow to only execute an instruction once\n        const newCat = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=ePEsJ53licCipIuc2sRXvPcfc8cV3A37`;\n\n        setTimeout(() => {\n            getGifs(newCat)\n            .then(setImages);\n          }, 1000);\n    }, [category])\n\n    return (\n        <div className=\"card-grid\">\n            <h2 className=\"animate__animated animate__slideInLeft\">{category}</h2>\n            {\n                images.filter(img => img.title !== '').map((img) => (\n                    <GifGridItem key={img.id} {...img} />\n                ))\n            }\n        </div>\n    )\n}","import React, { Fragment, useState } from \"react\";\n/* import PropTypes from \"prop-types\"; */\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nconst GifExpertApp = () => { //functional component\n\n    const [categories, setCategory] = useState([\n        'Rainbow Six Siege'\n    ])\n\n    /* const handleAdd = () => {\n        setCategory(['Borgore', ...categories]) //Add element first\n        setCategory([...categories, 'Borgore']) //Add element to last position\n    } */\n\n    return (\n        <Fragment>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategory={ setCategory }/> {/* Sólo se manda la función, los elementos se recuperan del lado del otro componente, addcategory añade elementos al array mediante setCategory */}\n            <hr></hr>\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid key={category} category={category}/>\n                    ))\n                }\n            </ol>\n        </Fragment>\n    )\n\n}\n\nexport default GifExpertApp;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport './index.css';\n\n\nconst div = document.querySelector('#root');\n\nReactDOM.render(<GifExpertApp/>, div);\n\n"],"sourceRoot":""}